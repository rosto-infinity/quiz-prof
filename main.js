//import "./style.css";
let app =document.querySelector('#app');
let startButton = document.querySelector('#start');

app.addEventListener("click", ()=>{
  console.log("[App] Click");
},true)
document.body.addEventListener("click", ()=>{
  console.log("[Boby] Click");
},true);
startButton.addEventListener("click", ()=>{
  console.log("[Start] Click");
  // console.log("[Start] Click");
},true)








































var fruit = "üçè";
function logger() {
  console.log(fruit);
  fruit = "üçé" 
  
}
logger()

// Le code suivant cr√©e une variable fruit avec la valeur "üçè", puis d√©finit une fonction logger qui affiche la valeur de la variable fruit dans la console. √Ä l'int√©rieur de la fonction, une nouvelle variable fruit est cr√©√©e avec la valeur "üçé". Lorsque la fonction est appel√©e, elle affiche la valeur de la variable fruit √† l'int√©rieur de la fonction, qui est "üçé". Cependant, √† l'ext√©rieur de la fonction, la valeur de la variable fruit reste "üçè". Cela est d√ª √† la port√©e des variables en JavaScript, o√π les variables d√©clar√©es √† l'int√©rieur d'une fonction ont une port√©e locale et ne sont pas accessibles √† l'ext√©rieur de la fonction. La variable fruit √† l'ext√©rieur de la fonction est donc diff√©rente de la variable fruit √† l'int√©rieur de la fonction. Ce ph√©nom√®ne est appel√© hoisting en JavaScript, o√π les d√©clarations de variables sont d√©plac√©es au d√©but de leur port√©e avant l'ex√©cution du code. 
